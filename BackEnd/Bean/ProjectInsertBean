
import static com.mongodb.client.model.Filters.eq;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.bson.Document;
import org.bson.types.ObjectId;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.mongodb.DB;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.gridfs.GridFSBucket;
import com.mongodb.client.gridfs.GridFSBuckets;
import com.mongodb.client.gridfs.model.GridFSUploadOptions;
import com.mongodb.gridfs.GridFS;
import com.mongodb.gridfs.GridFSInputFile;

public class ProjectInsertBean {
	  
	   // connections
	  MongoClientURI uri  = new MongoClientURI("mongodb://sjsidjain:sjsidjain@ds145359.mlab.com:45359/testhack"); 
      MongoClient client = new MongoClient(uri);
      MongoDatabase db = client.getDatabase(uri.getDatabase());
      MongoCollection <Document> tc = db.getCollection("UserProjectDetails");
      FindIterable <Document> docParser = tc.find();
     
      // Instance Variables
      Document doc = new Document();
      Date now = new Date();
     private String title,description,URL,likes,commentusername,comment;
     private boolean privaterepository; 
     private ArrayList<String> tags = new ArrayList<String>();
     private ArrayList<String> contributors = new ArrayList<String>();
     private ArrayList<String> images = new ArrayList<String>();
     private ArrayList<Document> commentarray = new ArrayList<Document>();
     
     //get Methods
      public Document getDocument(String id)
      {FindIterable<Document> doc = tc.find(eq("username",id));
          for(Document d : doc)
  	        this.doc=d;
      	return this.doc;
      }

      public ArrayList <Document> getComments(String title)
      { 
    	return commentarray;
      }
  
      @SuppressWarnings("unchecked")
  	public JSONObject getAllProjects(Document doc,JSONObject obj)
        {
      	  JSONArray list = new JSONArray();
  		ArrayList<Document> project = (ArrayList<Document>)doc.get("Projects");
            for(Document d: project){
          	  list.add(d);
            }
            obj.put("Projects",list);
            return obj;
        } 
         
        @SuppressWarnings("unchecked")
  	public JSONObject getSingleProject(Document doc, JSONObject obj, String title)
        {
      	  ArrayList<Document> required = (ArrayList<Document>)doc.get("Projects");
      	  for(Document d : required)
      		  if(d.getString("title").equals(title))
      			  obj.put("Project", d);
      	  return obj;
        }

      //set Methods
      public void setCommentUsername(String commentusername)
      {
    	  this.commentusername=commentusername;
      }
      
      public void setTitle(String title)
      {
    	  this.title=title;
      }
      
      public void setDescription(String description)
      {
    	  this.description=description;
      }
      
      public void setProjectURL(String URL)
      {
    	  this.URL=URL;
      }
      
      public void setLikes(String likes)
      {
    	  this.likes=likes;
      }
      public void setTags(ArrayList<String> tags)
      {
    	  this.tags=tags;
      }
      public void setComment(ArrayList <Document> comments)
      {
    ///	this.comment=comments;  
      }
      public void setPrivateRepository(boolean privaterepository)
      {
    	  this.privaterepository=privaterepository;
      }
      
      public boolean insertProjects()
      {   
         Document doc = new Document()
    	  .append("title",title)		  
    	  .append("description",description)
    	  .append("project_url",URL)
    	  .append("tags",tags)
    	  .append("likes",likes)
    	  .append("Comments",comment)
    	  .append("Contributors",contributors)
    	  .append("README", "rm")
    	  .append("private", privaterepository)
    	  .append("zip_file","")
    	  .append("images","");
    	  tc.updateOne(eq("username","sjsidjain"),new Document("$addToSet",new Document("Projects",doc)));	
    	  return true;
      }
      
      @SuppressWarnings("unchecked")
	  public void addComment(String commentusername,String comment,String title)
      {
    	    Document doc = new Document();
        	FindIterable <Document>project = (FindIterable<Document>) doc.get("project");  
       outer: for(Document d: project)
          	if(d.getString("title").equals(title))
            	{ doc =d;
            		break outer;
          	    }
      	
           ArrayList <Document> commentarray = (ArrayList<Document>) doc.get("Comments");
    	   Document commentdoc = new Document();
    	   commentdoc.append("username",commentusername)
    	   .append("comment",this.comment)
    	   .append("Date", now);
           this.commentarray.add(commentdoc);
       }
      public boolean saveZipFile(String zipFilePath) throws IOException
      {
    	    ZipInputStream zipIn = new ZipInputStream(new FileInputStream(zipFilePath));
   		    ZipEntry entry = zipIn.getNextEntry();
   		    outer: while (entry != null) {
   		          if (!entry.isDirectory()) {
   		          GridFSBucket gridBucket = GridFSBuckets.create(this.db,"photo");
   		          GridFSUploadOptions uploadOptions = new GridFSUploadOptions().chunkSizeBytes(1024).metadata(new Document("type", "image").append("upload_date","").append("content_type", "image/jpg"));
   		          ObjectId fileId = gridBucket.uploadFromStream(entry.getName(),zipIn, uploadOptions);
   		       	   		        }
   		        zipIn.closeEntry();
   		        entry = zipIn.getNextEntry();
   		    }
   		    zipIn.close();
            return true;    	  
      }
      public void deleteZipFile(ObjectId objectid) {
    	  try {
    	   GridFSBucket gridBucket = GridFSBuckets.create(db,"photo");
    	   gridBucket.delete(objectid);
    	  } catch (Exception e) {
    	   e.printStackTrace();
    	  }
    	} 
  }
